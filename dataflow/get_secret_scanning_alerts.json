{
	"name": "get_secret_scanning_alerts",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "api_secret_scanning_alerts",
						"type": "DatasetReference"
					},
					"name": "alerts"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sql_secret_scanning_alerts",
						"type": "DatasetReference"
					},
					"name": "database"
				}
			],
			"transformations": [
				{
					"name": "deriveColumns"
				},
				{
					"name": "selectColumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          body as (created_at as string, html_url as string, locations_url as string, number as short, push_protection_bypassed as boolean, push_protection_bypassed_at as string, push_protection_bypassed_by as (avatar_url as string, events_url as string, followers_url as string, following_url as string, gists_url as string, gravatar_id as string, html_url as string, id as integer, login as string, node_id as string, organizations_url as string, received_events_url as string, repos_url as string, site_admin as boolean, starred_url as string, subscriptions_url as string, type as string, url as string), repository as (archive_url as string, assignees_url as string, blobs_url as string, branches_url as string, collaborators_url as string, comments_url as string, commits_url as string, compare_url as string, contents_url as string, contributors_url as string, deployments_url as string, description as string, downloads_url as string, events_url as string, fork as boolean, forks_url as string, full_name as string, git_commits_url as string, git_refs_url as string, git_tags_url as string, hooks_url as string, html_url as string, id as integer, issue_comment_url as string, issue_events_url as string, issues_url as string, keys_url as string, labels_url as string, languages_url as string, merges_url as string, milestones_url as string, name as string, node_id as string, notifications_url as string, owner as (avatar_url as string, events_url as string, followers_url as string, following_url as string, gists_url as string, gravatar_id as string, html_url as string, id as integer, login as string, node_id as string, organizations_url as string, received_events_url as string, repos_url as string, site_admin as boolean, starred_url as string, subscriptions_url as string, type as string, url as string), private as boolean, pulls_url as string, releases_url as string, stargazers_url as string, statuses_url as string, subscribers_url as string, subscription_url as string, tags_url as string, teams_url as string, trees_url as string, url as string), resolution as string, resolved_at as string, resolved_by as (avatar_url as string, events_url as string, followers_url as string, following_url as string, gists_url as string, gravatar_id as string, html_url as string, id as integer, login as string, node_id as string, organizations_url as string, received_events_url as string, repos_url as string, site_admin as boolean, starred_url as string, subscriptions_url as string, type as string, url as string), secret as string, secret_type as string, secret_type_display_name as string, state as string, updated_at as string, url as string),",
				"          headers as [string,string]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     httpMethod: 'GET',",
				"     timeout: 30,",
				"     requestInterval: 0,",
				"     paginationRules: ['supportRFC5988' -> 'true'],",
				"     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> alerts",
				"selectColumns derive(date = currentDate(),",
				"          unique_id = concat(toString(currentDate()), repo_full_name)) ~> deriveColumns",
				"alerts select(mapColumn(",
				"          created_at = body.created_at,",
				"          number = body.number,",
				"          push_protection_bypassed = body.push_protection_bypassed,",
				"          push_protection_bypassed_login = body.push_protection_bypassed_by.login,",
				"          repo_full_name = body.repository.full_name,",
				"          resolution = body.resolution,",
				"          resolved_by_login = body.resolved_by.login,",
				"          resolved_at = body.resolved_at,",
				"          secret_type_display_name = body.secret_type_display_name,",
				"          updated_at = body.updated_at,",
				"          state = body.state",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumns",
				"deriveColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          created_at,",
				"          number,",
				"          push_protection_bypassed,",
				"          push_protection_bypassed_login,",
				"          repo_full_name,",
				"          resolution,",
				"          resolved_by_login,",
				"          resolved_at,",
				"          secret_type_display_name,",
				"          updated_at,",
				"          date,",
				"          unique_id,",
				"          state",
				"     )) ~> database"
			]
		}
	}
}